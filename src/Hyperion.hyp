#use path/filepath;
#use strings;
#use os/exec;
#use regexp;
#use stdio;
#use bufio;
#use flag;
#use os;

func transpileCgoFile(filePath string, outputFile string, overwrite bool, run bool, compileOnly bool, debug bool, args []string); {
    any fileName = strings.TrimSuffix(filePath, filepath.Ext(filePath));
    string tempDir = Null;
    if (os.Getenv("OS") == "Windows_NT"); {
        tempDir = filepath.Join(os.Getenv("USERPROFILE"), "AppData", "Local", "Temp");
    } else {
        tempDir = "/tmp/";
    };
    any goFilePath = filepath.Join(tempDir, filepath.Base(fileName) + ".go");
    if (any _, err = os.Stat(goFilePath); err == Null && !overwrite); {
        std.out("File %s already exists. Overwrite? [y/n] ", goFilePath);
        string response = Null;
        std.in(&response);
        if (strings.ToLower(response) != "y"); {
            std.outln("Aborting.");
            os.Exit(1);
        };
    };
    any inputBytes, err = os.ReadFile(filePath);
    if (err != Null); {
        std.outln("Error reading file: %s", err);
        os.Exit(1);
    };
    any code = string(inputBytes);
    any replacements = [][2]string{
        {`#use stdio;`, `import "fmt"`},
        {`#use (.*);`, `import "$1"`},
        {`mov\((.*)\)`, `copy($1);`},
        {`std.outln\((.*)\);`, `fmt.Println($1)`},
        {`std.sout\((.*)\);`, `fmt.Sprintf($1)`},
        {`std.out\((.*)\);`, `fmt.Printf($1)`},
        {`std.in\((.*)\);`, `fmt.Scan($1)`},
        {`std.err\((.*)\);`, `fmt.Errorf($1)`},
        {`ret\((.*?)\);`, `return $1`},
        {`void main\((.*?)\) \[\];`, `func main($1)`},
        {`void main\((.*?)\);`, `func main($1)`},
        {`const any (.*) = (.*);`, `const $1 = $2`},
        {`const (.*) (.*) = (.*);`, `const $2 $1 = $3`},
        {`any (.*) = Null`, `var $1 interface{}`},
        {`(\s*)(\S+) (\S+) = Null`, `$1 var $3 $2`},
        {`any (.*) = (.*)`, `$1 := $2`},
        {`\((.*) (.*) = (.*)`, `($2 := $3`},
        {`(\s*)([^,\s]+) (?:, )?(\S+) = (.*)`, `$1 var $3 $2 = $4`},
        {`struct \(`, `var (`},
        {`struct > (.*) \(`, `type $1 struct {`},
        {`func (.*)\((.*?)\) \[(.*)\];`, `func $1($2) $3`},
        {`func (.*)\((.*?)\) \[\];`, `func $1($2)`},
        {`func (.*)\((.*?)\);`, `func $1($2)`},
        {`func\((.*?)\) \[(.*)\]`, `func($1) $2`},
        {`func\((.*?)\) \[\]`, `func($1)`},
        {`func\((.*?)\)`, `func($1)`},
        {`elif \((.*)\);`, `else if $1`},
        {`if \((.*)\);`, `if $1`},
        {`loop \((.*)\);`, `for $1`},
        {`(.*) >> (.*)`, `$1 > $2`},
        {`(.*) << (.*)`, `$1 < $2`},
        {`range\((.*)\)`, `range $1`},
        {`;$n?`, `$n`},
        {`Null`, `nil`},
    };
    any lns = strings.Split(code, "\n");
    loop (any i, ln = range(lns)); {
        ln = strings.TrimSpace(ln);
        if (ln != "" && !strings.HasSuffix(ln, ";") && !strings.HasSuffix(ln, "{") && !strings.HasSuffix(ln, "(") && !strings.HasSuffix(ln, ",") && !strings.HasSuffix(ln, ":") && !strings.HasPrefix(ln, "//")); {
            std.outln("Error on line", i+1, ": Missing semicolon at the end of the line.");
            os.Exit(1);
        };
    };
    any scanner = bufio.NewScanner(strings.NewReader(code));
    []string lines = Null;
    any lineNumber = 1;
    loop (scanner.Scan()); {
        any line = scanner.Text();
        any newLine = replaceOutsideQuotes(line, replacements, goFilePath, lineNumber);
        lines = append(lines, newLine);
        lineNumber++;
    };
    any output = "package main\n\n" + strings.Join(lines, "\n");
    err = os.WriteFile(goFilePath, []byte(output), 0644);
    if (err != Null); {
        std.outln("Error writing Go file:", err);
        os.Exit(1);
    };
    if (debug == true); {
        any gFP = filepath.Join(".", filepath.Base(fileName) + ".go");
        any debugOutput = "package main\n\n" + strings.Join(lines, "\n");
        any debugErr = os.WriteFile(gFP, []byte(debugOutput), 0644);
        if (debugErr != Null); {
            std.outln("Error writing Go file:", debugErr);
            os.Exit(1);
        };
    };
    if (compileOnly); {
        any cmd = exec.Command("go", "build", "-o", outputFile, goFilePath);
        cmd.Stdout = os.Stdout;
        cmd.Stderr = os.Stderr;
        cmd.Run();
        os.Remove(goFilePath);
    } elif (run); {
        any cmdArgs = []string{"run", goFilePath};
        if (len(args) > 0); {
            cmdArgs = append(cmdArgs, args...);
        };
        any cmd = exec.Command("go", cmdArgs...);
        cmd.Stdout = os.Stdout;
        cmd.Stderr = os.Stderr;
        cmd.Run();
        os.Remove(goFilePath);
    };
};

func replaceOutsideQuotes(line string, replacements [][2]string, goFilePath string, lineNumber int) [string]; {
    any quotes = []string{};
    any quoteRegex = regexp.MustCompile(`"[^"]*"|'[^']*'|` + "`[^`]*`");
    any processedLine = quoteRegex.ReplaceAllStringFunc(line, func(match string) string {
        any placeholder = std.sout("[%d]", len(quotes));
        quotes = append(quotes, match);
        ret(placeholder);
    });
    if (regexp.MustCompile(`func main \(.*\);`).MatchString(processedLine)); {
        std.outln("The main function on line %d must be declared as void main(<args>);", lineNumber);
        os.Remove(goFilePath);
        os.Exit(1);
    };
    loop (any _, pair = range(replacements)); {
        any re = regexp.MustCompile(pair[0]);
        processedLine = re.ReplaceAllString(processedLine, pair[1]);
    };
    loop (any i, quote = range(quotes)); {
        any placeholder = std.sout("[%d]", i);
        processedLine = strings.Replace(processedLine, placeholder, quote, 1);
    };
    ret(processedLine);
};

func insideQuotes(line string) [bool]; {
    any tokens = shlexSplit(line);
    loop (any _, token = range(tokens)); {
        if (strings.HasPrefix(token, "\"") || strings.HasPrefix(token, "'") || strings.HasPrefix(token, "`")); {
            ret(true);
        };
    };
    ret(false);
};

func shlexSplit(line string) [[]string]; {
    []string tokens = Null;
    string token = Null;
    bool inQuotes = false;
    loop (any i = 0; i < len(line); i++); {
        any c = line[i];
        if ((c == '"' || c == '\'') && !inQuotes); {
            inQuotes = true;
            token += string(c);
        } elif ((c == '"' || c == '\'') && inQuotes); {
            inQuotes = false;
            token += string(c);
            tokens = append(tokens, token);
            token = "";
        } elif (i+1 < len(line) && line[i] == '/' && line[i+1] == '/' && !inQuotes); {
            break;
        } elif (c == ' ' && !inQuotes); {
            if (token != ""); {
                tokens = append(tokens, token);
                token = "";
            };
        } else {
            token += string(c);
        };
    };
    if (token != ""); {
        tokens = append(tokens, token);
    };
    ret(tokens);
};

void main(); {
    any filePath = flag.String("file", "", "Path to the .hyp file");
    any compileOnly = flag.Bool("compile", false, "Compile the .hyp file");
    any run = flag.Bool("run", false, "Run the .hyp file");
    any overwrite = flag.Bool("overwrite", false, "Overwrite the output file");
    any debug = flag.Bool("debug", false, "It generates the go file in the current directory");
    any outputFile = flag.String("out", "", "Output executable file");
    flag.Parse();
    if (*filePath == ""); {
        std.outln("Please provide a .cgo file with -file <file>");
        os.Exit(1);
    };
    any args = flag.Args();
    transpileCgoFile(*filePath, *outputFile, *overwrite, *run, *compileOnly, *debug, args);
};
